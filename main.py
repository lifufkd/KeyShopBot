#####################################
#            Created by             #
#                SBR                #
#               zzsxd               #
#####################################
import os
import platform
import telebot
from threading import Lock
from backend import TempUserData, DbAct, ExcellImport
from config_parser import ConfigParser
from db import DB
from frontend import Bot_inline_btns

####################################################################
config_name = 'secrets.json'
####################################################################


def get_subcot():
    s = ''
    data = db_actions.get_subcategories()
    for i in data:
        s += f'{i[0]} - {i[1]}\n'
    return s

def main():
    @bot.message_handler(commands=['start'])
    def start_message(message):
        user_id = message.chat.id
        db_actions.add_user(user_id, message.from_user.first_name, message.from_user.last_name,
                            f'@{message.from_user.username}')
        buttons = Bot_inline_btns()
        bot.send_message(message.chat.id,
                         f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}üëã\n'
                         f'–Ø KeyShop Botü§ñ',
                         reply_markup=buttons.msg_buttons())

    @bot.message_handler(commands=['tovar', 'admin'])
    def tovar_msg(message):
        command = message.text.replace('/', '')
        user_id = message.chat.id
        if db_actions.user_is_existed(user_id):
            buttons = Bot_inline_btns()
            if command == 'tovar':
                bot.send_message(message.chat.id, '–ö–∞—Ä—Ç–∏–Ω–∫–∞', reply_markup=buttons.tovar_bnts())
                bot.send_message(message.chat.id, '–û–ø–∏—Å–∞–Ω–∏–µ')
            if db_actions.user_is_admin(user_id):
                if command == 'admin':
                    bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!',
                                     reply_markup=buttons.admin_btns())
        else:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞')

    @bot.message_handler(content_types=['text', 'photo'])
    def text_message(message):
        photo = message.photo
        user_input = message.text
        user_id = message.chat.id
        if db_actions.user_is_existed(user_id):
            buttons = Bot_inline_btns()
            if temp_user_data.temp_data(user_id)[user_id][0] is not None:
                status = temp_user_data.temp_data(user_id)[user_id][0]
                if status == 0:
                    if photo is not None:
                        photo_id = photo[-1].file_id
                        photo_file = bot.get_file(photo_id)
                        photo_bytes = bot.download_file(photo_file.file_path)
                        temp_user_data.temp_data(user_id)[user_id][1][0] = photo_bytes
                        temp_user_data.temp_data(user_id)[user_id][0] = 1
                        bot.send_message(message.chat.id, 'üí∏–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞üí∏')
                    else:
                        bot.send_message(message.chat.id, '‚ùå–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ‚ùå')
                elif status == 1:
                    if user_input is not None:
                        try:
                            temp_user_data.temp_data(user_id)[user_id][1][1] = int(user_input)
                            temp_user_data.temp_data(user_id)[user_id][0] = 2
                            bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—áüîë')
                        except:
                            bot.send_message(message.chat.id, '‚ùå–°—É–º–º–∞ –Ω–µ–≤–µ—Ä–Ω–∞‚ùå')
                    else:
                        bot.send_message(message.chat.id, '‚ùå–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç‚ùå')
                elif status == 2:
                    if user_input is not None:
                        temp_user_data.temp_data(user_id)[user_id][1][2] = user_input
                        temp_user_data.temp_data(user_id)[user_id][0] = 3
                        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞üì®')
                    else:
                        bot.send_message(message.chat.id, '‚ùå–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç‚ùå')
                elif status == 3:
                    if user_input is not None:
                        temp_user_data.temp_data(user_id)[user_id][1][3] = user_input
                        temp_user_data.temp_data(user_id)[user_id][0] = 4
                        bot.send_message(message.chat.id, f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{get_subcot()}')
                    else:
                        bot.send_message(message.chat.id, '‚ùå–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç‚ùå')
                elif status == 4:
                    if user_input is not None:
                        temp_user_data.temp_data(user_id)[user_id][1][4] = user_input
                        temp_user_data.temp_data(user_id)[user_id][0] = None
                        db_actions.add_one_product(temp_user_data.temp_data(user_id)[user_id][1])
                        bot.send_message(message.chat.id, '‚úÖ–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ')
                    else:
                        bot.send_message(message.chat.id, '‚ùå–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç‚ùå')
                elif status == 5:
                    if user_input is not None:
                        if db_actions.check_product_id_exist(user_input):
                            temp_user_data.temp_data(user_id)[user_id][2] = user_input
                            temp_user_data.temp_data(user_id)[user_id][0] = None
                            bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å‚úèÔ∏è',
                                             reply_markup=buttons.change_btns())
                        else:
                            bot.send_message(message.chat.id, '‚ùåID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç‚ùå')
                    else:
                        bot.send_message(message.chat.id, '‚ùå–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç‚ùå')
                elif status == 6:
                    if user_input is not None:
                        try:
                            db_actions.update_product(int(user_input), 'price',
                                                      temp_user_data.temp_data(user_id)[user_id][2])
                            temp_user_data.temp_data(user_id)[user_id][0] = None
                            bot.send_message(user_id, '‚úÖ–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ')
                        except:
                            bot.send_message(user_id, '‚ùå–°—É–º–º–∞ –Ω–µ–≤–µ—Ä–Ω–∞‚ùå')
                    else:
                        bot.send_message(user_id, '‚ùå–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç‚ùå')
                elif status == 7:
                    if photo is not None:
                        photo_id = photo[-1].file_id
                        photo_file = bot.get_file(photo_id)
                        photo_bytes = bot.download_file(photo_file.file_path)
                        db_actions.update_product(photo_bytes, 'photo',
                                                  temp_user_data.temp_data(user_id)[user_id][2])
                        temp_user_data.temp_data(user_id)[user_id][0] = None
                        bot.send_message(user_id, '‚úÖ–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ')
                    else:
                        bot.send_message(user_id, '‚ùå–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ‚ùå')
                elif status == 8:
                    if user_input is not None:
                        db_actions.update_product(user_input, 'key',
                                                  temp_user_data.temp_data(user_id)[user_id][2])
                        temp_user_data.temp_data(user_id)[user_id][0] = None
                        bot.send_message(user_id, '‚úÖ–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ')
                    else:
                        bot.send_message(user_id, '‚ùå–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç‚ùå')
                elif status == 9:
                    if user_input is not None:
                        db_actions.update_product(user_input, 'category',
                                                  temp_user_data.temp_data(user_id)[user_id][2])
                        temp_user_data.temp_data(user_id)[user_id][0] = None
                        bot.send_message(user_id, '‚úÖ–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ')
                    else:
                        bot.send_message(user_id, '‚ùå–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç‚ùå')
                elif status == 10:
                    if user_input is not None:
                        db_actions.update_product(user_input, 'description',
                                                  temp_user_data.temp_data(user_id)[user_id][2])
                        temp_user_data.temp_data(user_id)[user_id][0] = None
                        bot.send_message(user_id, '‚úÖ–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ')
                    else:
                        bot.send_message(user_id, '‚ùå–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç‚ùå')
            else:
                if message.text == '–ü—Ä–æ—Ñ–∏–ª—åüë§':
                    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} {message.from_user.last_name}!',
                                     reply_markup=buttons.profile_btns())
                elif message.text == '–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏üõí':
                    bot.send_message(message.chat.id, '–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:\n1. Back4Blood')
                elif message.text == '–ù–∞–∑–∞–¥üîô':
                    bot.send_message(message.chat.id,
                                     f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}üëã\n'
                                     f'–Ø KeyShop Botü§ñ',
                                     reply_markup=buttons.msg_buttons())
                elif message.text == '–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤üóÇ':
                    categories = db_actions.get_categories()
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é‚úÖ', reply_markup=buttons.categories_btns(categories))
                elif message.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞üë®‚Äçüíª':
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚úÖ', reply_markup=buttons.support_btns())
                elif message.text == '–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ãüë•':
                    bot.send_message(message.chat.id, '–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã')
                elif message.text == 'FAQ‚ÑπÔ∏è':
                    bot.send_message(message.chat.id, 'FAQ')
        else:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞')

    @bot.callback_query_handler(func=lambda call: True)
    def callback(call):
        command = call.data
        user_input = call.message.text
        photo = call.message.photo
        message_id = call.message.id
        user_id = call.message.chat.id
        if db_actions.user_is_existed(user_id):
            buttons = Bot_inline_btns()
            if db_actions.user_is_admin(user_id):
                if command == 'addproduct':
                    temp_user_data.temp_data(user_id)[user_id][0] = 0
                    bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞üñº')
                elif command == 'importproducts':
                    db_actions.update_products_from_excell(sheet.products_excell())
                elif command == 'importcategories':
                    db_actions.update_categories_from_excell(sheet.categories_excell())
                elif command == 'importsubcategories':
                    db_actions.update_subcategories_from_excell(sheet.subcategories_excell())
                elif command == 'changeproduct':
                    temp_user_data.temp_data(user_id)[user_id][0] = 5
                    bot.send_message(call.message.chat.id, 'üíé–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞üíé')
                elif command[:10] == '—Åhangecart':
                    if command[10:] == '1':
                        temp_user_data.temp_data(user_id)[user_id][0] = 6
                        bot.send_message(call.message.chat.id, 'üí∏–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—Éüí∏')
                    elif command[10:] == '2':
                        temp_user_data.temp_data(user_id)[user_id][0] = 7
                        bot.send_message(call.message.chat.id, 'üñº–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—Éüñº')
                    elif command[10:] == '3':
                        temp_user_data.temp_data(user_id)[user_id][0] = 8
                        bot.send_message(call.message.chat.id, 'üîë–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–ª—é—áüîë')
                    elif command[10:] == '4':
                        temp_user_data.temp_data(user_id)[user_id][0] = 9
                        bot.send_message(call.message.chat.id, f'‚úâÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞‚úâÔ∏è\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{get_subcot()}')
                    elif command[10:] == '5':
                        temp_user_data.temp_data(user_id)[user_id][0] = 10
                        bot.send_message(call.message.chat.id, 'ü™™–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µü™™')
            if command[:10] == 'categories':
                subcategories = db_actions.get_sub_by_id_categories(command[10:])
                bot.edit_message_text('ü™™–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—éü™™', user_id, message_id, reply_markup=buttons.subcategories_btns(subcategories))
            elif command[:13] == 'subcategories':
                if command[13:] == '<back>':
                    categories = db_actions.get_categories()
                    bot.edit_message_text('ü™™–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éü™™', user_id, message_id,
                                     reply_markup=buttons.categories_btns(categories))
                elif command == 'addcontact':
                    bot.send_message(call.message.chat.id, 'üë§–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Çüë§')
                    temp_user_data.temp_data(user_id)[user_id][0] = 13
                elif command == 'addfaq':
                    bot.send_message(call.message.chat.id, '‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π FAQ‚ÑπÔ∏è')
                    temp_user_data.temp_data(user_id)[user_id][0] = 14
                else:
                    products = db_actions.get_products_by_id(command[13:])
                    for i in products:
                        bot.send_photo(user_id, photo=i[1], caption=f'üíéID —Ç–æ–≤–∞—Ä–∞: {i[0]}\nüîë–ö–ª—é—á: {i[3]}\nüì®–û–ø–∏—Å–∞–Ω–∏–µ: {i[4]}\nüí∏–¶–µ–Ω–∞: {i[2]}', reply_markup=buttons.buy_btns(i[0]))
        else:
            bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞')

    bot.polling(none_stop=True)


if '__main__' == __name__:
    os_type = platform.system()
    work_dir = os.path.dirname(os.path.realpath(__file__))
    config = ConfigParser(f'{work_dir}/{config_name}', os_type)
    temp_user_data = TempUserData()
    db = DB(config.get_config()['db_file_name'], Lock())
    sheet = ExcellImport(db)
    db_actions = DbAct(db, config)
    bot = telebot.TeleBot(config.get_config()['tg_api'])
    main()
