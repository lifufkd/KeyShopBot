#####################################
#            Created by             #
#                SBR                #
#               zzsxd               #
#####################################
from telebot import types
#####################################


class Bot_inline_btns:
    def __init__(self):
        super(Bot_inline_btns, self).__init__()
        self.__markup = types.InlineKeyboardMarkup(row_width=2)

    # def start_btns(self):
    #     gift = types.InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫üéÅ', callback_data='take_gift')
    #     write = types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É‚úçüèº', callback_data='write_manager')
    #     self.__markup.add(gift, write)
    #     return self.__markup

    def msg_buttons(self):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        product_catalog = types.KeyboardButton('–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤üóÇ')
        profile = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—åüë§')
        support = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞üë®‚Äçüíª')
        keyboard.add(product_catalog, profile, support)
        return keyboard

    def tovar_bnts(self):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buy = types.KeyboardButton('–ö—É–ø–∏—Ç—åüíé')
        download_dist = types.KeyboardButton('–°–∫–∞—á–∞—Ç—å –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤üñ•')
        instruction = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏‚úâÔ∏è')
        keyboard.add(buy, download_dist, instruction)
        return keyboard

    def podcategories_btns(self):
        podcategories = types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π', callback_data='podcategory')
        self.__markup.add(podcategories)
        return self.__markup

    def tovar_btns(self):
        tovar = types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π', callback_data='tovary_in_podcategories')
        self.__markup.add(tovar)
        return self.__markup


    def profile_btns(self):
        markup = types.InlineKeyboardMarkup(row_width=1)
        my_buys = types.InlineKeyboardButton('–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏üõí' , callback_data='my_buys')
        back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥üîô' , callback_data='back')
        markup.add(my_buys, back)
        return markup

    def support_btns(self):
        markup = types.InlineKeyboardMarkup(row_width=1)
        my_buys = types.InlineKeyboardButton('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ãüë•', callback_data='our_contacts')
        FAQ = types.InlineKeyboardButton('FAQ‚ÑπÔ∏è', callback_data='FAQ')
        back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥üîô', callback_data='back')
        markup.add(my_buys, FAQ, back)
        return markup
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        our_contacts = types.KeyboardButton('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ãüë•')
        FAQ = types.KeyboardButton('FAQ‚ÑπÔ∏è')
        back = types.KeyboardButton('–ù–∞–∑–∞–¥üîô')
        keyboard.add(our_contacts, FAQ, back)
        return keyboard

    def admin_btns(self):
        addproduct = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', callback_data='addproduct')
        importproducts = types.InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ excel', callback_data='importproducts')
        importcategories = types.InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ excel', callback_data='importcategories')
        importsubcategories = types.InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ excel', callback_data='importsubcategories')
        changeproduct = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', callback_data='changeproduct')
        changhecontact = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', callback_data='changecontact')
        changefaq = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å FAQ', callback_data='changefaq')
        changestartmsg = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='changestartmsg')
        changesale = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É', callback_data='changesale')
        changecat = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data='changecat')
        changeprecat = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data='changeprecat')
        changeprod = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞', callback_data='changeprod')
        delete_product = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='delete_product')
        self.__markup.add(addproduct, importproducts, importcategories, importsubcategories, changeproduct,
                          changhecontact, changefaq, changestartmsg, changesale, changecat, changeprecat, changeprod, delete_product)
        return self.__markup

    def categories_btns(self, data):
        data.append(('<main>', '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        markup = types.InlineKeyboardMarkup(row_width=1)
        for i in data:
            btn = types.InlineKeyboardButton(i[1], callback_data=f'categories{i[0]}')
            markup.add(btn)
        return markup

    def delete_btns(self):
        markup = types.InlineKeyboardMarkup(row_width=1)
        as1 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='delete_cat')
        as2 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='delete_precat')
        as3 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='delete_prod')
        markup.add(as1, as2, as3)
        return markup

    def subcategories_btns(self, data):
        data.append(('<back>', '–Ω–∞–∑–∞–¥'))
        data.append(('<main>', '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        markup = types.InlineKeyboardMarkup(row_width=1)
        for i in data:
            btn = types.InlineKeyboardButton(i[1], callback_data=f'subcategories{i[0]}')
            markup.add(btn)
        return markup

    def reference_btns(self):
        data = list()
        data.extend([('1', '–î–∞'), ('0', '–ù–µ—Ç'), ('<back>', '–Ω–∞–∑–∞–¥'), ('<main>', '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')])
        markup = types.InlineKeyboardMarkup(row_width=1)
        for i in data:
            btn = types.InlineKeyboardButton(i[1], callback_data=f'reference{i[0]}')
            markup.add(btn)
        return markup

    def products_btns(self, data):
        data.append(('<back>', '–Ω–∞–∑–∞–¥'))
        data.append(('<main>', '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        markup = types.InlineKeyboardMarkup(row_width=1)
        for i in data:
            if i[0] not in ['<back>', '<main>']:
                btn = types.InlineKeyboardButton(f'{i[1]} * {i[2]}‚ÇΩ', callback_data=f'products{i[0]}')
            else:
                btn = types.InlineKeyboardButton(i[1], callback_data=f'products{i[0]}')
            markup.add(btn)
        return markup

    def buy_btns(self, id_product, instuction_url, distro_url):
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data=f'buy{id_product}')
        btn2 = types.InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤', url=distro_url)
        btn3 = types.InlineKeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏', url=instuction_url)
        btn4 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'buy<back>')
        btn5 = types.InlineKeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=f'buy<main>')
        markup.add(btn1, btn2, btn3, btn4, btn5)
        return markup

    def change_btns(self):
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton('–¶–µ–Ω—É', callback_data=f'—Åhangecart1')
        btn2 = types.InlineKeyboardButton('–§–æ—Ç–æ', callback_data=f'—Åhangecart2')
        btn3 = types.InlineKeyboardButton('–ö–ª—é—á', callback_data=f'—Åhangecart3')
        btn4 = types.InlineKeyboardButton('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data=f'—Åhangecart4')
        btn5 = types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'—Åhangecart5')
        btn6 = types.InlineKeyboardButton('–ü—Ä–µ–≤—å—é', callback_data=f'—Åhangecart6')
        btn7 = types.InlineKeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏', callback_data=f'—Åhangecart7')
        btn8 = types.InlineKeyboardButton('–°—Å—ã–ª–∫—É –Ω–∞ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤', callback_data=f'—Åhangecart8')
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8)
        return markup

    def purchased_btns(self, data):
        data.append(('<main>', '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        markup = types.InlineKeyboardMarkup(row_width=1)
        for i in data:
            btn = types.InlineKeyboardButton(i[1], callback_data=f'purchased{i[0]}')
            markup.add(btn)
        return markup

    def pay_btn(self, price, url):
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn = types.InlineKeyboardButton(f'–û–ø–ª–∞—Ç–∏—Ç—å {price}‚ÇΩ', url=url)
        markup.add(btn)
        return markup

